function printPrimes(n) {
   let factors = [];
   
  /* since 2 is the only even prime, it's easier to factor it out 
   * separately from the odd factor loop (for loop doesn't need to 
   * check whether or not to add 1 or 2 to f).
   * The condition is essentially checking if the number is even 
   * (bitwise "&" operator compares the bits of 2 numbers in binary  
   * and outputs a binary number with 1's where their digits are the 
   * same and 0's where they differ. In this case it only checks if 
   * the final digit for num in binary is 1, which would mean the 
   * number is odd, in which case the output would be 1, which is 
   * interpreted as true, otherwise the output will be 0, which is 
   * interpreted as false. "!" returns the opposite boolean, so this 
   * means that '!(num & 1)' is true when the num is not odd).
   */
   
   while(!(n & 1)) {
      factor.push(2);
      n /= 2;
  }
  
  // 'i*i <= n' is faster than 'i <= Math.sqrt(n)'
  for(let i = 3; i*i <= n; i+=2) {
  	while(!(n % i)) {
      	  factors.push(i);
          n /= i;
        }
  }
  
  /* if the number is already prime, then this adds it to factors so
   * an empty array isn't returned
   */
  if(n != 1) {
  	factors.push(n);
  }
  // The prime factors.
  console.log(factors);
  
  //The biggest prime factor that we're looking from the array.
  console.log(Math.max(...factors));
  return Math.max(...factors);
}

printPrimes(600851475143);
